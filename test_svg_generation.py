#!/usr/bin/env python3
"""
Script de test pour la g√©n√©ration de posters SVG avec donn√©es r√©elles
"""

import sys
import os
import json
import asyncio
from pathlib import Path
from datetime import datetime

# Ajouter project-strava-api au path Python
project_root = Path(__file__).parent / "project-strava-api"
sys.path.insert(0, str(project_root))

from services.svg_generator import SVGGenerator
from services.poster_service import PosterService
from models.user import User


def load_real_activity_data():
    """Charger la premi√®re activit√© depuis test_strava_data.json"""
    
    test_data_file = Path(__file__).parent / 'test_strava_data.json'
    
    if not test_data_file.exists():
        print(f"‚ùå Fichier {test_data_file} non trouv√©")
        print("   Ex√©cute d'abord: python collect_test_data_oauth.py")
        return None, None
    
    try:
        with open(test_data_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        user_data = data['user_data']
        first_activity = data['activities_data'][0]  # Premi√®re activit√©
        
        # Cr√©er l'objet User
        user = User(
            id=user_data['id'],
            strava_id=user_data['id'],
            username=f"{user_data['firstname']}{user_data['lastname']}".lower(),
            first_name=user_data['firstname'],
            last_name=user_data['lastname'],
            profile_picture=user_data.get('profile', ''),
            created_at=datetime.now()
        )
        
        # Pr√©parer les donn√©es d'activit√©
        activity_data = {
            'name': first_activity['name'],
            'type': first_activity['type'],
            'distance': first_activity['distance'],
            'moving_time': first_activity['moving_time'],
            'elapsed_time': first_activity['elapsed_time'],
            'total_elevation_gain': first_activity['total_elevation_gain'],
            'average_speed': first_activity['average_speed'],
            'max_speed': first_activity['max_speed'],
            'start_date': first_activity['start_date'],
            'average_heartrate': first_activity.get('average_heartrate'),
            'max_heartrate': first_activity.get('max_heartrate'),
            'coordinates': []
        }
        
        # Extraire les coordonn√©es (lat, lon) et ajouter altitude fictive
        coordinates = first_activity.get('coordinates', [])
        for i, coord in enumerate(coordinates):
            if len(coord) >= 2:
                lat, lon = coord[0], coord[1]
                # Altitude fictive bas√©e sur la position dans le parcours
                alt = 50 + (i % 20) * 2  # Variation d'altitude fictive
                activity_data['coordinates'].append((lat, lon, alt))
        
        print(f"üìä Donn√©es activit√© charg√©es:")
        print(f"   üë§ Utilisateur: {user.first_name} {user.last_name}")
        print(f"   üèÉ Activit√©: {activity_data['name']}")
        print(f"   üìè Distance: {activity_data['distance'] / 1000:.1f} km")
        print(f"   ‚è±Ô∏è Temps: {activity_data['moving_time'] // 60} min")
        print(f"   üìç Points GPS: {len(activity_data['coordinates'])}")
        
        return user, activity_data
        
    except Exception as e:
        print(f"‚ùå Erreur chargement donn√©es: {e}")
        import traceback
        traceback.print_exc()
        return None, None


async def test_svg_generation():
    """Test de g√©n√©ration SVG uniquement"""
    print("üé® Test g√©n√©ration SVG avec donn√©es r√©elles")
    print("=" * 50)
    
    # Template SVG path
    template_path = Path(__file__).parent / "poster_framework.svg"
    
    if not template_path.exists():
        print(f"‚ùå Template SVG non trouv√©: {template_path}")
        return False
    
    try:
        # Charger les vraies donn√©es
        user, activity_data = load_real_activity_data()
        if not user or not activity_data:
            return False
        
        # G√©n√©rer le SVG
        print(f"\nüé® G√©n√©ration du SVG...")
        svg_generator = SVGGenerator(str(template_path))
        svg_content = svg_generator.generate_poster(activity_data)
        
        # Sauvegarder
        output_path = Path("test_poster_real.svg")
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(svg_content)
        
        file_size = output_path.stat().st_size
        print(f"   ‚úÖ SVG g√©n√©r√©: {output_path} ({file_size} bytes)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration SVG: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_png_generation():
    """Test de g√©n√©ration PNG via PosterService"""
    print("\nüñºÔ∏è Test g√©n√©ration PNG avec PosterService")
    print("=" * 50)
    
    try:
        # Charger les vraies donn√©es
        user, activity_data = load_real_activity_data()
        if not user or not activity_data:
            return False
        
        # Service de poster
        poster_service = PosterService(user)
        
        print(f"üöÄ G√©n√©ration poster PNG...")
        result = await poster_service.generate_poster(activity_data, format_type="png")
        
        print(f"üìä R√©sultat:")
        print(f"   Status: {result['status']}")
        print(f"   Fichier: {result['filename']}")
        print(f"   Taille: {result['file_size']} bytes")
        print(f"   Temps: {result['generation_time']} ms")
        
        if result['status'] == 'generated':
            print(f"   ‚úÖ PNG cr√©√©: {result['file_path']}")
            return True
        else:
            print(f"   ‚ùå √âchec: {result.get('error', 'Erreur inconnue')}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration PNG: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_complete_pipeline():
    """Test complet de la pipeline"""
    print("\nüîÑ Test pipeline compl√®te")
    print("=" * 50)
    
    # Test SVG
    svg_success = await test_svg_generation()
    
    # Test PNG seulement si SVG r√©ussi
    png_success = False
    if svg_success:
        png_success = await test_png_generation()
    
    print(f"\nüìä R√©sultats des tests:")
    print(f"   SVG: {'‚úÖ' if svg_success else '‚ùå'}")
    print(f"   PNG: {'‚úÖ' if png_success else '‚ùå'}")
    
    if svg_success and png_success:
        print(f"\nüéâ Tous les tests r√©ussis!")
        print(f"üí° La g√©n√©ration de posters fonctionne avec les vraies donn√©es Strava")
        return True
    else:
        print(f"\n‚ùå Certains tests ont √©chou√©")
        return False


def main():
    """Point d'entr√©e principal"""
    import sys
    
    print("üß™ Tests de g√©n√©ration de posters Strava")
    print("=" * 60)
    print("üéØ Objectif: Valider la g√©n√©ration SVG ‚Üí PNG avec vraies donn√©es")
    print()
    
    # Mode de test
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
    else:
        try:
            mode = input("Mode: svg (s), png (p), ou complet (c) ? [c]: ").lower().strip()
        except EOFError:
            mode = 'c'
    
    if not mode:
        mode = 'c'
    
    # Ex√©cuter les tests
    success = False
    if mode in ['s', 'svg']:
        success = asyncio.run(test_svg_generation())
    elif mode in ['p', 'png']:
        success = asyncio.run(test_png_generation())
    else:
        success = asyncio.run(test_complete_pipeline())
    
    return 0 if success else 1


if __name__ == "__main__":
    exit(main())