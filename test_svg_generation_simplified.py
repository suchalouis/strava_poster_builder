#!/usr/bin/env python3
"""
Script simplifi√© de test pour la g√©n√©ration de posters SVG avec donn√©es r√©elles
Utilise le module commun poster_generator.py
"""

import sys
import os
from pathlib import Path

# Importer le module commun
from poster_generator import PosterGenerator, load_strava_test_data, get_first_activity_with_splits

def test_svg_generation_simple():
    """Test de g√©n√©ration SVG simple avec le module commun"""
    print("üé® Test g√©n√©ration SVG avec module commun")
    print("=" * 50)
    
    # Charger les donn√©es
    data_result = load_strava_test_data()
    if not data_result:
        return False
    
    user_data, activities_data = data_result
    
    # Prendre la premi√®re activit√© avec splits
    activity = get_first_activity_with_splits(activities_data)
    if not activity:
        activity = activities_data[0] if activities_data else None
    
    if not activity:
        print("‚ùå Aucune activit√© trouv√©e")
        return False
    
    print(f"üë§ Utilisateur: {user_data.get('firstname')} {user_data.get('lastname')}")
    print(f"üèÉ Activit√©: {activity.get('name', 'Sans nom')}")
    print(f"üìè Distance: {activity.get('distance', 0) / 1000:.1f} km")
    print(f"üìç Points GPS: {len(activity.get('coordinates', []))}")
    
    try:
        # G√©n√©rer le poster avec le module commun
        print(f"\nüé® G√©n√©ration du poster SVG...")
        generator = PosterGenerator()
        output_path = generator.generate_poster(activity, "test_poster_simple.svg")
        
        # V√©rifier le fichier g√©n√©r√©
        if os.path.exists(output_path):
            file_size = os.path.getsize(output_path)
            print(f"‚úÖ Poster g√©n√©r√© avec succ√®s:")
            print(f"   üìÅ Fichier: {output_path}")
            print(f"   üìä Taille: {file_size} bytes")
            
            # Afficher les fonctionnalit√©s incluses
            print(f"\nüìã Fonctionnalit√©s incluses:")
            stats = generator.format_activity_statistics(activity)
            print(f"   ‚úÖ Statistiques: {stats['DISTANCE']}, {stats['DURATION']}")
            
            if activity.get('km_splits'):
                print(f"   ‚úÖ Histogramme d'allure: {len(activity['km_splits'])} splits")
            else:
                print(f"   ‚ö†Ô∏è Histogramme d'allure: Pas de splits disponibles")
            
            if activity.get('coordinates'):
                print(f"   ‚úÖ Carte GPS: {len(activity['coordinates'])} points")
            else:
                print(f"   ‚ö†Ô∏è Carte GPS: Pas de coordonn√©es disponibles")
            
            return True
        else:
            print(f"‚ùå √âchec: Fichier non cr√©√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration SVG: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_multiple_activities():
    """Test avec plusieurs activit√©s"""
    print("\nüîÑ Test avec plusieurs activit√©s")
    print("=" * 50)
    
    # Charger les donn√©es
    data_result = load_strava_test_data()
    if not data_result:
        return False
    
    user_data, activities_data = data_result
    
    # Prendre les 3 premi√®res activit√©s avec splits
    activities_with_splits = [a for a in activities_data if a.get('km_splits')]
    test_activities = activities_with_splits[:3] if activities_with_splits else activities_data[:3]
    
    if not test_activities:
        print("‚ùå Aucune activit√© trouv√©e")
        return False
    
    print(f"üìä Test avec {len(test_activities)} activit√©s")
    
    generator = PosterGenerator()
    success_count = 0
    
    for i, activity in enumerate(test_activities):
        activity_name = activity.get('name', f'Activit√© {i+1}')
        safe_name = activity_name.replace(' ', '_').replace('/', '_')[:20]
        output_path = f"poster_multi_{i+1}_{safe_name}.svg"
        
        try:
            print(f"\n   üé® G√©n√©ration poster {i+1}: {activity_name}")
            result_path = generator.generate_poster(activity, output_path)
            
            if os.path.exists(result_path):
                file_size = os.path.getsize(result_path)
                print(f"   ‚úÖ Cr√©√©: {result_path} ({file_size} bytes)")
                success_count += 1
            else:
                print(f"   ‚ùå √âchec: {activity_name}")
                
        except Exception as e:
            print(f"   ‚ùå Erreur: {activity_name} - {e}")
    
    print(f"\nüìä R√©sultats: {success_count}/{len(test_activities)} posters g√©n√©r√©s")
    return success_count > 0

def main():
    """Point d'entr√©e principal"""
    import sys
    
    print("üß™ Tests de g√©n√©ration SVG simplifi√©s")
    print("=" * 60)
    print("üéØ Objectif: Valider le module commun poster_generator.py")
    print()
    
    # Mode de test
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
    else:
        try:
            mode = input("Mode: simple (s), multi (m), ou tous (t) ? [s]: ").lower().strip()
        except EOFError:
            mode = 's'
    
    if not mode:
        mode = 's'
    
    # Ex√©cuter les tests
    success = False
    if mode in ['s', 'simple']:
        success = test_svg_generation_simple()
    elif mode in ['m', 'multi']:
        success = test_multiple_activities()
    else:  # tous
        success1 = test_svg_generation_simple()
        success2 = test_multiple_activities()
        success = success1 and success2
    
    if success:
        print(f"\nüéâ Tests r√©ussis ! Le module commun fonctionne correctement.")
    else:
        print(f"\n‚ùå Certains tests ont √©chou√©.")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit(main())